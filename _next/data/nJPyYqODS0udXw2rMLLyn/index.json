{"pageProps":{"posts":[{"slug":"ncp-rocky-mirror-404-error","content":"\n네이버 클라우드에서 Rocky Linux 8.8 버전을 사용하고 있는데<br>\n`yum update` 같이 패키지 업데이트를 하려고 하면 에러가 떴다...<br>\n에러 메시지를 보면 미러 사이트에서 특정 repository에 대한 메타데이터를 받아오질 못하고 있고<br>\n모든 미러 사이트에서 404 에러가 뜨며 다운로드를 실패했다는 것이다.\n\n```bash\nRocky Linux 8.8 - Extras    \nErrors during downloading metadata for repository 'extras':\n  - Status code: 404 for https://rocky-linux-asia-southeast1.production.gcp.mirrors.ctrliq.cloud/pub/rocky//8.8/extras/x86_64/os/repodata/repomd.xml (IP: 34.160.39.155)\n  - Status code: 404 for https://rocky-linux-me-west1.production.gcp.mirrors.ctrliq.cloud/pub/rocky//8.8/extras/x86_64/os/repodata/repomd.xml (IP: 34.149.26.62)\n  - Status code: 404 for https://rocky-linux-asia-northeast1.production.gcp.mirrors.ctrliq.cloud/pub/rocky//8.8/extras/x86_64/os/repodata/repomd.xml (IP: 34.160.117.186)\n  - Status code: 404 for https://rocky-linux-asia-east2.production.gcp.mirrors.ctrliq.cloud/pub/rocky//8.8/extras/x86_64/os/repodata/repomd.xml (IP: 35.241.40.125)\n  - Status code: 404 for https://rocky-linux-asia-northeast3.production.gcp.mirrors.ctrliq.cloud/pub/rocky//8.8/extras/x86_64/os/repodata/repomd.xml (IP: 35.186.196.188)\n  - Status code: 404 for https://rocky-linux-asia-northeast2.production.gcp.mirrors.ctrliq.cloud/pub/rocky//8.8/extras/x86_64/os/repodata/repomd.xml (IP: 34.107.160.108)\n  - Status code: 404 for https://rocky-linux-asia-south1.production.gcp.mirrors.ctrliq.cloud/pub/rocky//8.8/extras/x86_64/os/repodata/repomd.xml (IP: 34.120.3.13)\n  - Status code: 404 for https://rocky-linux-asia-east1.production.gcp.mirrors.ctrliq.cloud/pub/rocky//8.8/extras/x86_64/os/repodata/repomd.xml (IP: 35.186.202.231)\n  - Status code: 404 for https://rocky-linux-asia-southeast2.production.gcp.mirrors.ctrliq.cloud/pub/rocky//8.8/extras/x86_64/os/repodata/repomd.xml (IP: 34.111.41.84)\n  - Status code: 404 for https://rocky-linux-asia-south2.production.gcp.mirrors.ctrliq.cloud/pub/rocky//8.8/extras/x86_64/os/repodata/repomd.xml (IP: 34.149.203.6)\nError: Failed to download metadata for repo 'extras': Cannot download repomd.xml: Cannot download repodata/repomd.xml: All mirrors were tried\nAdding repo from: https://download.docker.com/linux/centos/docker-ce.repo\n\nRocky Linux 8.8 - PowerTools\nErrors during downloading metadata for repository 'powertools':\n  - Status code: 404 for http://dl.rockylinux.org/pub/rocky/8.8/PowerTools/x86_64/os/repodata/repomd.xml (IP: 151.101.198.132)\nError: Failed to download metadata for repo 'powertools': Cannot download repomd.xml: Cannot download repodata/repomd.xml: All mirrors were tried\n```\n\n<br>\n\n실제로 에러 메시지에 뜨는 주소로 접근해도 에러가 뜬다.<br>\n<img src=\"/posts/ncp-rocky-mirror-404-error/repo-nginx-error.png\" width=\"500px\"/>\n\n<br>\nExtras와 PowerTools 이 repository에서만 발생하는 에러여서<br>\n다른 repository의 .repo 파일들을 확인했는데 차이점이 있었다.<br>\n\n`/etc/yum.repos.d` 디렉토리에 패키지 관련 .repo 파일들이 있는데<br>\nRocky와 관련된 파일들 중 `Rocky-BaseOS.repo`와 문제가 되고 있는 `Rocky-Extras.repo` 둘을 비교해보면 baseurl이 다름을 알 수 있다.<br>\n\n```bash\n# Rocky-BaseOS.repo\n#\n# The mirrorlist system uses the connecting IP address of the client and the\n# update status of each mirror to pick current mirrors that are geographically\n# close to the client.  You should use this for Rocky updates unless you are\n# manually picking other mirrors.\n#\n# If the mirrorlist does not work for you, you can try the commented out\n# baseurl line instead.\n\n[baseos]\nname=Rocky Linux $releasever - BaseOS\nbaseurl=http://repo.ncloud.com/rocky/$releasever/BaseOS/$basearch/os/\n# mirrorlist=https://mirrors.rockylinux.org/mirrorlist?arch=$basearch&repo=BaseOS-$releasever\ngpgcheck=1\nenabled=1\ncountme=1\ngpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-rockyofficial\n```\n\n<br>\n\n`Rocky-BaseOS.repo`의 baseurl은 `repo.ncloud.com`으로 네이버 클라우드의 자체 repository로 되어있다.<br>\n하지만 `Rocky-Extras.repo` 파일의 baseurl은 주석 처리가 되어 있고<br>\n`mirrors.rockylinux.org`로 mirrorlist가 추가되어 있다.<br>\n\n```bash\n# Rocky-Extras.repo\n#\n# The mirrorlist system uses the connecting IP address of the client and the\n# update status of each mirror to pick current mirrors that are geographically\n# close to the client.  You should use this for Rocky updates unless you are\n# manually picking other mirrors.\n#\n# If the mirrorlist does not work for you, you can try the commented out\n# baseurl line instead.\n\n[extras]\nname=Rocky Linux $releasever - Extras\nmirrorlist=https://mirrors.rockylinux.org/mirrorlist?arch=$basearch&repo=extras-$releasever\n#baseurl=http://dl.rockylinux.org/$contentdir/$releasever/extras/$basearch/os/\ngpgcheck=1\nenabled=1\ncountme=1\ngpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-rockyofficia\n```\n\n\n<br>\n\nmirrorlist를 제거하거나 주석 처리한 후 `Rocky-BaseOS.repo`와 동일하게<br>\nbaseurl을 네이버 클라우드 repository로 변경해주면 된다.<br>\n`baseurl=http://repo.ncloud.com/rocky/$releasever/BaseOS/$basearch/os/` 여기에서<br>\n`BaseOS`만 각 파일에 맞게 수정해주면 되는데 `Extras`가 아닌 `extras`를 입력해주어야 한다.<br>\n\n`baseurl=http://repo.ncloud.com/rocky/$releasever/extras/$basearch/os/`\n\n\n\nExtras와 함께 에러가 발생한 PowerTools는 이름 그대로 입력해주면 된다.<br>\n```bash {13, 14}\n# Rocky-PowerTools.repo\n#\n# The mirrorlist system uses the connecting IP address of the client and the\n# update status of each mirror to pick current mirrors that are geographically\n# close to the client.  You should use this for Rocky updates unless you are\n# manually picking other mirrors.\n#\n# If the mirrorlist does not work for you, you can try the commented out\n# baseurl line instead.\n\n[powertools]\nname=Rocky Linux $releasever - PowerTools\n#mirrorlist=https://mirrors.rockylinux.org/mirrorlist?arch=$basearch&repo=PowerTools-$releasever\nbaseurl=http://repo.ncloud.com/rocky/$releasever/PowerTools/$basearch/os/\ngpgcheck=1\nenabled=0\ncountme=1\ngpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-rockyofficial\n```\n\n\n<br>\nbaseurl 수정 후 업데이트 성공적!\n","title":"네이버 클라우드 Rocky Linux 패키지 업데이트 미러 사이트 에러 해결","description":"네이버 클라우드에서 yum, dnf update 할 때... All mirrors were tried","date":"2023-12-21"},{"slug":"nextjs-custom-component-page","content":"\n각 페이지에 특정 속성 값을 부여하고 속성 값에 따라 다른 동작을 하도록 하고 싶다.<br>\n예를 들어 `useLayout` 이라는 속성이 있을 때 `useLayout = true`일 때는 레이아웃이 컴포넌트를 감싸는 형태로 보여주고<br>\n`useLayout = false`일 때는 컴포넌트만 보여주도록 하고싶다.<br> 하지만 단순히 `Page.useLayout = true;` 이렇게 추가해주면 타입 에러가 난다..<br>\n\n우선 app 구조는 다음과 같다.<br>\n\n### \\_app.tsx\n\n```js {3}\nfunction App({ Component, pageProps }: AppProps) {\n\treturn (\n\t\t{Component.useLayout ? (\n\t\t\t<Layout>\n\t\t\t\t<Component {...pageProps} />\n\t\t\t</Layout>\n\t\t) : (\n\t\t\t<Component {...pageProps} />\n\t\t)}\n\t);\n}\n\n```\n\n에러가 나는 부분은 `Component.useLayout`인데 AppProps의 Component에 `useLayout` 속성이 존재하지 않아서 그렇다.<br>\n\n```\nProperty 'useLayout' does not exist on type 'FunctionComponent<{}> & { getInitialProps?(context: NextPageContext): {} | Promise<{}>; }'\n```\n\n해결하기 위해선 interface를 확장시켜 사용해주면 된다.\n\n```js\ninterface CustomAppProps extends Omit<AppProps, 'Component'> {\n\tComponent: AppProps['Component'] & { useLayout: boolean };\n}\n\nfunction App({ Component, pageProps }: CustomAppProps) {\n\t...\n}\n\n```\n\napp에서 에러를 해결했으니 이제 페이지별로 useLayout 속성을 추가해줘야 하는데 역시나 여기서도 쉽게 되지 않는다..ㅎㅎ<br>\n레이아웃과 함께 보여주고 싶은 NextPage 타입의 Page 상수가 있다고 해보자<br>\n\n### page.tsx\n\n```js {7}\nconst Page: NextPage = () => {\n\t...\n}\n\nexport default Page;\n\nPage.useLayout = true;\n```\n\n이 때 마지막 라인에서 이런 에러가 난다.<br>\n\n```\nProperty 'useLayout' does not exist on type 'FunctionComponent<{}> & { getInitialProps?(context: NextPageContext): {} | Promise<{}>; }'\n```\n\n당연하게도 NextPage에 `useLayout` 속성이 존재하지 않기 때문이다..<br>\n그렇다면 AppProps와 마찬가지로 NextPage 타입도 확장시켜주면 되는데<br>\nNextPage의 경우 props를 넘겨받기도 하고, props에 타입을 지정해줘야 하는 경우가 있기 때문에 살짝 헤맸다.<br>\n\n```js\ntype NextPageWithLayout<P = {}> = NextPage<P> & {\n\tuseLayout: boolean;\n};\n\nconst Page: NextPageWithLayout = () => {\n\t...\n}\n\nexport default Page;\n\nPage.useLayout = true;\n```\n\n`NextPage` 타입에 커스텀 속성 `useLayout`이 추가된 `NextPageWithLayout`을 Page의 타입으로 지정해주면 된다.<br>\n이 때 props가 필요하지 않은 페이지도 있으니 `NextPageWithLayout<P = {}>`와 같이 빈 값을 기본값으로 넣어주고<br>\nprops의 타입이 있는 경우엔 그대로 넘겨받을 수 있도록 `NextPage<P>`를 사용한다.<br>\n\n<br>\n<br>\n커스텀 끝...!\n","title":"Next.js Component와 NextPage에 커스텀 속성 추가하기 with TypeScript","description":"","date":"2023-09-05"},{"slug":"nextjs-socketio-server-client","content":"\nSocket.io를 사용하는 예제 중 대표적인게 채팅이지만 client 간 채팅 보다는 좀 더 간단한 목적으로 사용하고자 했고<br>\nclient에서 데이터를 보내면 그 데이터로 server에서 특정 처리 후 성공, 에러 등의 메시지를 다시 client로 보내주는 기능이 필요했다.<br>\n\n\n### 설치\n\n```\nnpm install -D express\nnpm install -D socket.io\nnpm install -D socket.io-client\nnpm install -D @types/express\nnpm install -D @types/socket.io\n```\n\nTypeScript를 사용중이라 타입들도 같이 설치를 해줬다.<br>\n\n### Server\n\n프로젝트 루트에 server.ts를 추가해준다.\n\n```js\nconst express = require('express');\nconst app = express();\nconst http = require('http').createServer(app);\n\nconst io = require('socket.io')(http, {\n    // option (CORS 에러 발생할 경우 추가)\n    cors: {\n        origin: 'client 주소',\n        methods: ['GET', 'POST']\n    }\n})\n\nio.on('connection', (socket) => {\n    // client가 연결되면 연결된 socket id 콘솔에 출력\n    console.log(`User Connected: ${socket.id}`);\n\n    // client로부터 'to server' 이벤트를 받으면 socket id와 함께 client가 보낸 메시지 콘솔에 출력\n    socket.on('to server', (message) => {\n        console.log(`${socket.id}: ${message}`);\n\n        // client에게 통신 성공 메시지를 보내줌\n        socket.emit('to client', 'Communication Success.');\n    });\n});\n\n// 8000번 포트 사용\nhttp.listen(8000);\n```\n\n필수적인 이벤트만 추가해주고 `node server.ts` 로 서버를 실행시켜 준다.\n\n### Client\n\nclient에서 `socket.io-client`를 통해 socket을 사용할 수 있다.\n\n```js\nconst { io } from 'socket.io-client';\nconst { useState, useEffect } from 'react';\n\nconst Page = () => {\n    const [message, setMessage] = useState('');\n\n    // server.ts 설정해준 포트를 사용한다.\n    const socket = io('server:8000');\n\n    useEffect(() => {\n        // server로부터 'to client' 이벤트의 메시지가 전송되면 콘솔에 메시지 출력\n        socket.on('to client', (message: string) => {\n            console.log(message);\n        });\n    }, [message]);\n\n    const handleChange = (e) => {\n        setMessage(e.target.value);\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n\n        // 사용자가 입력한 메시지를 'to server' 이벤트로 server에 전송\n        socket.emit('to server', message);\n    }\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <input type=\"text\" name=\"message\" value={message} onChange={handleChange}/>\n            <button type=\"submit\">Submit</button>\n        </form>\n    )\n}\n\nexport default Page;\n```\n\n<br><br>\n### 결과\n\n<img src=\"/posts/nextjs-socketio-server-client/client.png\" width=\"500px\" />\n\n```bash\nUser Connected: fawYXNTKIyV-72QnAAAX\nfawYXNTKIyV-72QnAAAX: Hello~\n```\n\nclient에서 `Hello~`를 입력 후 Submit 버튼을 누르면<br>\nserver 단 콘솔엔 연결된 socket id와 client가 보낸 'Hello~'가 출력되고,<br>\nserver가 보낸 `Communication Success.` 메시지가 client의 콘솔에 출력된다.","title":"Socket.io로 client와 server 간 데이터 주고 받기 with Next.js, TypeScript","description":"","date":"2023-05-12"},{"slug":"react-hook-form-useref","content":"\n꼭 state를 사용해야하는 곳이 아니면 `react-hook-form`으로 폼을 사용하고 있었는데<br>\nuseRef로 폼에 스타일을 적용하거나 포커싱 해줘야 하는 일이 생겼다.<br>\n\noverwritten 에러, getValues()에 값이 없는 에러.. 를 겪은 후 사용하는 방법을 정리해본다.<br>\n\n### register와 ref의 순서\n\n만약 아래와 같이 ref를 먼저 지정해주고 register를 사용할 경우<br>\n`'ref' is specified more than once, so this usage will be overwritten.` 에러를 볼 수 있다.<br>\nregister 자체적으로 ref를 가지고 있기 때문에 먼저 ref를 지정해주면 덮어써지는 것이다.<br>\n\n```js\nconst inputRef = useRef(null);\n\n<input\n    ref={inputRef}\n    {...register('id')}\n/>\n```\n\n순서만 바꿔주면 에러는 사라지지만 제대로 사용할 수 없다.\n\n### register의 ref를 useRef와 연결\n\n```js\nconst inputRef = useRef(null);\n\n<input\n    {...register('id')}\n    ref={inputRef}\n/>\n```\n\n위 에러를 해결하기 위해 register와 ref의 순서는 바꿔줬지만 문제가 하나 생겼다.<br>\ngetValues()로 폼 데이터를 가져와도 id의 값은 `undefined`였다.<br>\n문제는 ref가 변경되었는데 register는 그걸 모르고 있다는 것이다. 그래서 값을 아무리 변경해도 업데이트가 되지 않았다.<br>\n\n```js\nconst inputRef = useRef(null);\n\n<input\n    {...register('id')}\n    ref={(e) => {\n        register('id').ref(e);\n        inputRef.current = e;\n    }}\n/>\n```\n\n이렇게 register('id')의 ref를 변경해주면 되고,<br>\n`register('id').ref = e;`가 아님을 명심해야 한다.<br>\n\n값도 잘 바뀌고 useRef로 DOM 접근도 잘 되는 것을 확인했다 :3","title":"react-hook-form과 useRef 같이 쓰기","description":"","date":"2023-05-12"},{"slug":"custom-react-datepicker","content":"\n캘린더에서 날짜를 선택할 수 있도록 해주는 DatePicker를 사용해야 하는데<br>\n기존에 사용하던 jQuery DatePicker 대신 `react-datepicker` 라이브러리를 사용하고자 한다.<br>\n\n[react-datepicker 공식 사이트](https://reactdatepicker.com/)\n\n### 설치\n\n```\nnpm install -D react-datepicker\nnpm install -D @types/react-datepicker // typescript가 아니라면 생략\nnpm install -D date-fns // locale 설정에서 사용\n```\n\n`react-datepicker`의 기본 디자인에서 추가 해야할 커스텀 항목은 3가지 정도이다.<br>\n\n1. 년도와 월을 각각 선택할 수 있는 Select element\n2. 오늘 날짜로 변경해주는 '오늘' 버튼\n3. 캘린더를 닫아주는 '닫기' 버튼\n\n`react-datepicker`를 제대로 사용하기 위해선 css 파일도 import 해주어야 한다.\n커스텀 디자인 같은 경우 추가로 css 파일을 만들어서 변경을 원하는 클래스만 수정하고 import 해주었다.\n\n```js\n# _app.tsx\nimport 'react-datepicker/dist/react-datepicker.css';\nimport 'styles/custom-datepicker.css'; // 커스텀 디자인 css 파일\n```\n\n컴포넌트로 빼서 사용하도록 했는데 대략적 구조와 사용한 DatePicker 옵션은 다음과 같다.\n\n```js\nimport { forwardRef, useRef, useState } from 'react';\nimport DatePicker from 'react-datepicker';\nimport { ko } from 'date-fns/locale'; // 언어 설정을 위한 locale import\n\nexport const CustomDatePicker() => {\n\tconst [startDate, setStartDate] = useState(today); // 날짜 선택을 위한 state\n\tconst ref = useRef<DatePicker>(null); // 캘린더 close를 위한 ref\n\tconst CustomInput = forwardRef(({ value, onClick }, ref) => ( Custom Input ));\n\n\t<DatePicker\n\t\tref={ref}\n\t\tlocale={ko} // 언어 설정\n\t\tselected={startDate} // 선택된 날짜\n\t\tdateFormat=\"yyyy-MM-dd\" // 날짜를 '2023-04-12'와 같이 표시\n\t\ttodayButton=\"오늘\" // 날짜를 오늘로 변경하는 버튼의 이름 설정\n\t\tonChange={(date) => setStartDate(date)} // 날짜 선택 시 상태 변경\n\t\tcustomInput={<CustomInput />} // Custom Input\n\t\trenderCustomHeader={({ date, changeYear, changeMonth, decreaseMonth, increaseMonth, prevMonthButtonDisabled, nextMonthButtonDisabled }) => (...)} // Custom Header\n\t/>\n\t{ 닫기 버튼이 들어갈 곳 }\n\t</DatePicker>\n}\n```\n\n### Custom Input\n\n선택된 날짜가 보여질 곳을 커스텀 할 수 있다.<br>\n설정하지 않으면 기본적으로 input 태그가 사용되는데 button으로 변경할 수도 있고, input에 원하는 옵션을 추가할 수도 있다.<br>\n기본 input은 키보드 입력으로 수정이 가능하기 때문에 readOnly 옵션을 추가해줄 것이다.<br>\nreadOnly 옵션을 추가해주면 캘린더로만 날짜를 변경할 수 있다.\n\n```js\nconst CustomInput = forwardRef(({ value, onClick }, ref) => (\n\t<input onClick={onClick} ref={ref} defaultValue={value} readOnly />\n))\n```\n\n### Custom Header\n\n년도와 월을 변경해서 한 번에 해당 년, 월의 캘린더로 이동할 수 있도록 커스텀 하려고 한다.\n\n```js\n\nconst today = new Date();\nconst years = Array.from(Array(11), (_, i) => getYear(today) - 10 + i); // 오늘부터 10년 전까지의 년도 [2013, 2014, ...]\nconst months = ['1월', '2월', '3월', '4월', '5월', '6월', '7월', '8월', '9월', '10월', '11월', '12월'];\n\n<DatePicker\n    // 생략\n\trenderCustomHeader={({ date, changeYear, changeMonth, decreaseMonth, increaseMonth, prevMonthButtonDisabled, nextMonthButtonDisabled }) => (\n\t\t<div>\n\t\t\t<button onClick={decreaseMonth} disabled={prevMonthButtonDisabled}>{' < '}</button> // 이전 월로 이동\n\t\t\t<select\n\t\t\t\tvalue={date.getFullYear()}\n\t\t\t\tonChange={({ target: { value } }) => changeYear(value)}\n\t\t\t>\n\t\t\t{years.map((option) => (\n\t\t\t\t<option key={option} value={option}>\n\t\t\t\t\t{option}\n\t\t\t\t</option>\n\t\t\t))}\n\t\t\t</select>\n\t\t\t<select\n\t\t\t\tvalue={months[date.getMonth()]}\n\t\t\t\t// months 배열에서 인덱스로 값을 가져오는데 date.getMonth()는 0부터(1월) 시작하므로 months에는 '1월'부터 값을 넣어야 한다.\n\t\t\t\tonChange={({ target: { value } }) => changeMonth(months.indexOf(value))}\n\t\t\t>\n\t\t\t{months.map((option) => (\n\t\t\t\t<option key={option} value={option}>\n\t\t\t\t\t{option}\n\t\t\t\t</option>\n\t\t\t))}\n\t\t\t</select>\n\t\t\t<button onClick={increaseMonth} disabled={nextMonthButtonDisabled}>{' > '}</button> // 다음 월로 이동\n\t\t</div>\n\t>\n\t</DatePicker>\n)}\n```\n\n### 닫기 버튼 추가\n\n오늘로 변경하는 버튼은 DatePicker에 `todayButton` 옵션을 넘겨주면 간단하게 추가 가능하지만<br>\n캘린더를 수동으로 닫을 수 있는 버튼은 따로 없는 듯하다.<br>\n캘린더를 닫기 위해 useRef()로 제어해줄 것이다.<br>\n캘린더 하단에 위치하는 버튼으로 만들어주려면 `<DatePicker></DatePicker>` 태그 사이에 추가 해주어야 한다.<br>\n\n```js\n<DatePicker\n\tref={ref}\n\t// 생략\n>\n\t<div>\n\t\t<button onClick={() => ref.current.setOpen(false)}>닫기</button>\n\t</div>\n</DatePicker>\n```\n\nref를 추가한 후에 아무리 버튼을 눌러도 캘린더가 사라지지 않아서 뭔가 잘못되었다 싶었는데<br>\n검색 해보니 `<DatePicker>` 컴포넌트를 `<label>` 태그로 감싸면 동작하지 않는다고 한다.<br>\n컴포넌트를 호출하는 부분에서 `<label>` 태그를 사용하고 있었고, 제거해주니 정상 동작했다..!<br>\n[참고 링크](https://github.com/Hacker0x01/react-datepicker/issues/1012)\n\n### 결과\n\n커스텀 디자인까지 적용한 모습이다. <br>\n윈도우 녹화는 select option이 안보여서 중간에 년도와 월을 선택하는 과정이 생략되었다.\n\n<img src=\"/posts/custom-react-datepicker/custom-datepicker.gif\" width=\"500px\"/>\n","title":"react-datepicker 커스텀 해서 사용하기 with TypeScript","description":"년도와 월을 선택할 수 있는 Select, 오늘 날짜로 변경 및 닫기 버튼 추가","date":"2023-04-12"},{"slug":"typescript-setInterval","content":"\nsetInterval을 이용해서 새로고침 기능을 추가하던 중 useState의 타입을 지정해줘야 했는데<br>\n그냥 `Timer`를 사용할 경우 `Cannot find name 'Timer'.` 에러가 떴다.<br>\n\n알아보니 NodeJS 환경에서 타이머 함수 사용 시 setInterval은 `NodeJS.Timer` 타입을,<br>\n브라우저 환경에서는 `number` 타입을 반환하기 때문에 두 가지 방법으로 지정해줄 수 있다.\n\n1. NodeJS.Timer\n\n```js\nconst [refreshInterval, setRefreshInterval] = useState<NodeJS.Timer>();\n...\n# setInterval 그대로 사용한다.\nsetRefreshInterval(setInterval(() => console.log('refresh'), 5000));\n```\n\n2. number\n\n```js\nconst [refreshInterval, setRefreshInterval] = useState<number>();\n...\n# window.setInterval을 사용한다.\nsetRefreshInterval(window.setInterval(() => console.log('refresh'), 5000));\n```\n","title":"setInterval의 타입은..? with TypeScript","description":"","date":"2023-02-02"},{"slug":"nextjs-12to13-migration","content":"\n진행중인 프로젝트는 Next.js 12.2.5 버전으로 개발중이었는데 Next.js 13이 나왔다는 소식을 들었다..!<br>\n`getStaticProps`나 `getServerSideProps`를 사용하지 않고 `use` 하나로 Data Fetching이 가능하다는 점이 매력적이라 버전을 올리기로 했다.<br>\n버전은 계속 올라갈테니 조금이라도 빨리 마이그레이션을 해서 적응하는게 좋을 것 같기도 했다.<br>\napp/ 디렉토리에서 Layout, Loading, Error 페이지 등을 관리할 수 있다는 점도 좋았으나,<br>\n아직 베타 버전이고 Production에 적용하는 것을 권장하지 않아서 우선 기존에 사용하던 pages/는 유지하기로 했다.<br>\n\n<br>\n12.x 버전에서 13 버전으로 마이그레이션 하면서 겪은 에러나 변경점을 기록하고자 한다.\n\n### 1. useRouter\n\n12 버전에서는 `next/router`를 사용해서 라우팅을 했으나<br>\n13 버전에서는 `next/navigation`를 사용해야 한다고 한다.<br>\n[참고 링크](https://stackoverflow.com/questions/71961539/router-push-is-not-working-as-expected-nextjs)\n\n```js\n[12.x]\nimport { useRouter } from \"next/router\";\n\n[13.x]\nimport { useRouter } from 'next/navigation';\n```\n\n그리고 `next/navigation`을 사용하게 되면 pathname을 바로 가져올 수 없다.<br>\n12 버전에서 `.pathname`으로 사용하던 부분을 `next/navigation`의 `usePathname` 함수를 불러와 사용해야 한다.\n\n```js\n[12.x]\nimport { useRouter } from \"next/router\";\n...\nconst router = useRouter();\nconst pathname = router.pathname;\n\n[13.x]\nimport { useRouter, usePathname } from 'next/navigation';\n...\nconst router = useRouter();\nconst pathname = usePathname();\n```\n\n<br>\n\n### 2. Link\n\n`<Link>` 내부의 `<a>` 태그를 제거해야 한다.<br>\n`<a>` 태그가 존재하면 이런 에러가 뜬다.\n\n```js\nError: Invalid <Link> with <a> child. Please remove <a> or use <Link legacyBehavior>.\n```\n\n`<a>` 태그에서 onClick 등을 사용했다면 그대로 `<Link>`에 옮겨주면 된다.<br>\ncodemods로 자동으로 변경해주는게 있다는대 수작업으로 변경한 뒤에 알게되었다...^^<br>\n[codemods#new-link](https://beta.nextjs.org/docs/upgrade-guide/codemods#new-link)\n\n```js\n[12.x]\n<Link href='/test'>\n    <a onClick={(e) => click(e)}>\n        Click\n    </a>\n</Link>\n\n[13.x]\n<Link href='/test' onClick={(e) => click(e)}>\n    Click\n</Link>\n```\n\n\n### 작업중...\n","title":"Next.js 13 마이그레이션 기록","description":"12.2.5 to 13.0.6","date":"2022-12-08"},{"slug":"react-ts-array-set-checkbox","content":"\n## Array로 구현하기\n\n1. 이벤트 핸들러\n```js\n// 1: 체크박스의 id만 숫자로 담을 거여서 number[] 타입으로 배열을 만들어주었다.\nconst [checkedList, setCheckedList] = useState<number[]>([]);\n\n// 2: 전체 체크/해제 handler\nconst handleAllCheck = (e) => {\n\t// 전체 체크/해제용 체크박스가 체크되었을 때\n\tif (e.target.checked) {\n\t\tlet items:number[] = [];\n\n\t\t// 한 페이지에서 보여지고 있는 데이터를 전부 items 배열에 넣어주고 setCheckedList\n\t\t// data = [{ id: 1, name: 'test'}, { id: 2, name: 'checkbox'}, { id: 3, name: 'mitny' }]\n\t\tObject.entries(data).map((item, i) => {\n\t\t\titems[i] = item[1].id;\n\t\t});\n\n\t\tsetCheckedList(items);\n\t} else {\n\t\t// 전체 체크/해제용 체크박스가 해제되었을 때 배열 초기화\n\t\tsetCheckedList([]);\n\t}\n}\n\n// 3: 개별 선택/해제 handler\nconst handleSingleCheck = (e) => {\n\t// 각 행의 체크박스가 체크되었을 때 checkedList 배열에 현재 행의 체크박스 id를 추가한다.\n\tif (e.target.checked) {\n\t\tsetCheckedList([...checkedList, Number(e.target.id)]);\n\t} else {\n\t\t// 각 행의 체크박스가 해제되었을 때 checkedList 배열에서 현재 행의 체크박스 id를 제거한다.\n\t\tsetCheckedList(checkedList.filter(id => id != Number(e.target.id)));\n\t}\n}\n```\n\n핸들러 부분에서는 체크박스를 체크/해제하는 이벤트가 발생했을 때 배열에 추가/삭제(또는 초기화)하는 방식으로 구현했다.<br>\n체크박스가 있는 테이블에서는 아래와 같이 핸들러를 호출했다.\n\n2. 이벤트 핸들러 호출\n```js {8-10, 22-23}\n<table>\n\t<colgroup>\n\t\t<col width=\"38px\"/><col width=\"*\"/>\n\t</colgroup>\n\t<thead>\n\t\t<tr>\n\t\t\t<th>\n\t\t\t\t// 전체 체크/해제 체크박스, 변경될 때 handleAllCheck가 호출된다.\n\t\t\t\t// checked 여부를 확인하기 위해 이벤트 객체를 넘겨준다.\n\t\t\t\t<input type=\"checkbox\" onChange={(e) => handleAllCheck(e)}/>\n\t\t\t</th>\n\t\t\t<th>이름</th>\n\t\t</tr>\n\t</thead>\n\t<tbody>\n\t\t{ data && Object.entries(data).map((item, id) => (\n\t\t<tr key={id}>\n\t\t\t<td>\n\t\t\t\t<input\n\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\tid={item[1].id}\n\t\t\t\t\tonChange={(e) => handleSingleCheck(e)} // 각 행의 체크박스, 변경될 때 handleSingleCheck가 호출된다.\n\t\t\t\t\tchecked={checkedList.includes(item[1].id)} // checkedList에 현재 행의 id가 존재하면 checked=true\n\t\t\t\t/>\n\t\t\t\t</td>\n\t\t\t<td>{item[1].name}</td>\n\t\t</tr>\n\t\t))}\n\t</tbody>\n</table>\n```\n\n\n지금은 각 행의 고유한 값인 id로 처리하고 있어서 중복 처리가 필요하지 않았지만<br>\n따로 중복 처리를 하는 과정을 생략하고 싶어서 Set으로 구현하는 것도 시도해보았다.<br>\n\nSet으로 구현하면서 어려웠던 점은 클릭했을 때 정상적으로 checkedList의 상태는 변하지만 화면에서는 체크 표시가 되지 않는 것이었다.<br>\n검색해보니 단순히 `checkedList.add(1)`를 할 경우 변화가 생겨도 다시 렌더링이 되지 않는다고 한다.<br>\n실제로도 페이지를 새로 고침하지 않고 다른 부분의 코드를 수정하여 새로 렌더링이 됐을 때는 체크 표시가 되었다.<br>\n\n새로 Set을 만들어서 상태를 변경해주는 방식으로 해결했다.\n\n## Set으로 구현하기\n\n1. 이벤트 핸들러\n```js\n// 1: number 타입의 Set 생성, 이후 새로 Set을 생성할 때도 number 타입으로 생성해야 한다.\nconst [checkedList, setCheckedList] = useState(new Set<number>());\n\n// 2: 전체 체크/해제 handler\nconst handleAllCheck = (e) => {\n\tif (e.target.checked) {\n\t\tObject.entries(data).map((item, i) => {\n\t\t\t// checkedList를 전체 id를 추가한 새로운 Set으로 만들어주고 setCheckedList\n\t\t\tsetCheckedList(checkedList => new Set<number>(checkedList.add(Number(item[1].id))));\n\t\t});\n\t} else {\n\t\t// 전체 체크/해제용 체크박스가 해제되었을 때 새로운 Set 생성해서 초기화\n\t\tsetCheckedList(new Set<number>());\n\t}\n}\n\n// 3: 개별 선택/해제 handler\nconst handleSingleCheck = (e) => {\n\t// 체크되면 checkedList에 id 추가, 해제되면 filter로 id 제거\n\tif (e.target.checked) {\n\t\tsetCheckedList(checkedList => new Set<number>(checkedList.add(Number(e.target.id))));\n\t} else {\n\t\tsetCheckedList(checkedList => new Set<number>([...checkedList].filter(id => id !== Number(e.target.id))));\n\t}\n}\n```\n\nArray 구현 방식과 다른 점은 객체를 새로 만들어준다는 것이고 전체적인 로직은 비슷하다.\n\n2. 이벤트 핸들러 호출\n```js {23}\n<table>\n\t<colgroup>\n\t\t<col width=\"38px\"/><col width=\"*\"/>\n\t</colgroup>\n\t<thead>\n\t\t<tr>\n\t\t\t<th>\n\t\t\t\t// 전체 체크/해제 체크박스, 변경될 때 handleAllCheck가 호출된다.\n\t\t\t\t// checked 여부를 확인하기 위해 이벤트 객체를 넘겨준다.\n\t\t\t\t<input type=\"checkbox\" onChange={(e) => handleAllCheck(e)}/>\n\t\t\t</th>\n\t\t\t<th>이름</th>\n\t\t</tr>\n\t</thead>\n\t<tbody>\n\t\t{ data && Object.entries(data).map((item, id) => (\n\t\t<tr key={id}>\n\t\t\t<td>\n\t\t\t\t<input\n\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\tid={item[1].id}\n\t\t\t\t\tonChange={(e) => handleSingleCheck(e)} // 각 행의 체크박스, 변경될 때 handleSingleCheck가 호출된다.\n\t\t\t\t\tchecked={checkedList.has(item[1].id)} // checkedList에 현재 행의 id가 존재하면 checked=true\n\t\t\t\t/>\n\t\t\t\t</td>\n\t\t\t<td>{item[1].name}</td>\n\t\t</tr>\n\t\t))}\n\t</tbody>\n</table>\n```\n\n이벤트 핸들러 호출에서 바뀐 점은 checked 처리뿐이다.<br>\n`checkedList.includes() -> checkedList.has()`\n\n\n## 결과\n<img src=\"/posts/react-ts-array-set-checkbox/checkbox-exam.gif\" width=\"500px\"/>\n","title":"체크박스 상태 관리 및 전체 선택/해제 구현하기 with React, TypeScript","description":"Array와 Set 두 가지 버전으로 구현해보기","date":"2022-09-27"},{"slug":"nextjs-react-i18next","content":"\n처음 Next.js에서 다국어 처리를 해줄 때는 `next-i18next`를 사용했었는데<br>\nSSR로 구현하다보니 __NEXT_DATA__에 리소스가 노출되는 문제가 있어서 클라이언트단에서 번역 처리가 되도록 `react-i18next`를 사용하기로 했다.<br>\nnext-i18next를 CSR에서도 사용할 수 있다거나 리소스를 노출시키지 않고 사용할 수 있는 방법을 찾게 되면 그 때 다시 next-i18next를 사용해보겠다..\n\n\n### 설치\n```bash\nnpm install i18next @types/i18next react-i18next @types/react-i18next\n```\n\n### 리소스 디렉토리 생성\n현재 프로젝트 디렉토리 구조는 이런 식으로 되어있다.<br>\n컴포넌트, 페이지 같은 것들은 src의 하위 디렉토리로 관리하고 있는데<br>\n리소스 디렉토리는 public에 만들지 않고 src/locales로 만들어주겠다.\n\n```bash\n.\n├── next.config.js\n├── next-env.d.ts\n├── next-i18next.config.js\n├── node_modules\n├── package.json\n├── public\n├── src\n│   ├── components\n│   ├── pages\n│   └── styles\n└── tsconfig.json\n```\n\n### src/locales\nsrc/locales에서는 각 언어별로 따로 디렉토리를 만들어주고, i18next 설정 파일인 i18n.ts를 만들어 줄 것이다.<br>\n\n```bash\n.\n├── locales\n│   ├── i18n.ts\n│   ├── en\n│   │   └── common.json\n│   ├── ja\n│   │   └── common.json\n│   └── ko\n│       └── common.json\n```\n\n### i18n.ts\n```js\nimport i18n, { Resource } from \"i18next\";\nimport { initReactI18next } from \"react-i18next\";\n\nimport ko from \"./ko/common.json\";\nimport en from \"./en/common.json\";\nimport ja from \"./ja/common.json\";\n\nconst resources:Resource = {\n  ko: { common: ko },\n  en: { common: en },\n  ja: { common: ja }\n}\n\ni18n.use(initReactI18next).init({\n\tresources, // 리소스\n\tns: \"common\", // namespace 설정\n\tlng: \"ko\", // 초기 설정 언어\n\tfallbackLng: \"ko\",\n\tinterpolation: {\n\t\tescapeValue: false\n\t},\n\treact: {\n\t\tuseSuspense: false\n\t}\n});\n\nexport default i18n;\n```\n\n언어별 리소스 파일을 import 해서 resources 객체에 넣어준 후 i18next를 초기화한다.<br>\n리소스 파일은 아래와 같이 각 메뉴별로 key를 나눠놨는데 비구조화 할당 시 각 key를 namespace로 인식하는 것 같았다.\n\n```json\n// ko/common.json\n{\n\t\"menu\": {\n\t\t\"logout\": \"로그아웃\",\n\t\t...\n\t},\n\t\"config\": {\n\t\t...\n\t}\n\t...\n}\n```\n`t('key1.key2')`가 아닌 `t('key1:key2')`로 접근해야 리소스가 제대로 불러와졌다.<br>\n그래서 resources 객체 생성은 비구조화 할당이 아닌 지금의 코드로 변경하게 되었다.\n\n```js\n// ko에 비구조화 할당했을 때\nconst resources:Resource = {\n  ko: { ...ko },\n  en: { ...en },\n  ja: { ...ja }\n}\n\n// console.log(resources);\n{\n\tko: { menu: { logout: '로그아웃', ... }, ... },\n\ten: ...\n}\n```\n\n```js\n// ko.common에 바로 넣어줬을 때\nconst resources:Resource = {\n  ko: { common: ko },\n  en: { common: en },\n  ja: { common: ja }\n}\n\n// console.log(resources);\n{\n\tko: { common: { menu: [Object] } },\n\ten: ...\n}\n```\n\n\ni18next의 기본 namespace 값은 translation인데 리소스 파일명과 맞추기 위해 `ns: \"common\"` 설정도 해줬다.<br>\nfallbackLng는 만약 en으로 언어 설정을 바꾸려고 했는데 어떤 리소스 키가 en에 없을 경우 대신 값을 가져올 언어를 설정하는 것이다.<br>\n자세한 설정은 [이 곳](https://www.i18next.com/overview/configuration-options)에..\n\n설정이 끝났다면 이제 i18n을 import 해서 사용하면 된다.<br>\n우선 프로젝트 전체에서 사용할 리소스여서 `_app.tsx`에 i18n을 import 해주었다.\n\n```js\nimport \"../locales/i18n\";\n...\n\nfunction App({ ... }) {\n\treturn (\n\t\t...\n\t)\n}\n\nexport default MyApp\n```\n\n이후에는 직접 리소스를 사용할 곳에서 `useTranslation`을 import 하고 사용하면 된다.\n\n```js\n// src/pages/ex.tsx\n\n...\nimport { useTranslation } from \"react-i18next\";\n\nexport default function Example() {\n\tconst { t } = useTranslation();\n\n\treturn (\n\t\t<div>{t('menu.logout')}</div>\n\t)\n}\n\n```\n\n","title":"react-i18next로 다국어 처리하기 with Next.js, TypeScript","description":"react-i18next로 다국어 리소스를 적용해보자","date":"2022-09-23"},{"slug":"nextjs-amcharts4","content":"\n<img src=\"/posts/nextjs-amcharts4/amcharts-light-opaque.png\" width=\"500px\" />\n\n[amcharts4](https://www.amcharts.com/docs/v4/)\n<br>지도, 그래프 등 다양한 시각화 기능을 제공한다.<br>\n현재는 라이선스를 구매해서 사용하고 있는데, 라이선스가 없는 경우 워터마크가 화면에 표시된다.\n\n\n기존에는 이렇게 js 파일을 추가해서 사용했는데\n\n```js\n<script src=\"/js/amcharts4/core.js\"></script>\n<script src=\"/js/amcharts4/maps.js\"></script>\n<script src=\"/js/amcharts4/charts.js\"></script>\n...\n```\n\nNext.js에서 사용하려면 npm 또는 yarn으로 설치해주면 된다.\n```bash\nnpm install @amcharts/amcharts4\n\nyarn add @amcharts/amcharts4\n```\n\n설치 후 사용하려는 곳에서 import를 해주면 된다.\n```js\nimport * as am4core from \"@amcharts/amcharts4/core\";\nimport * as am4charts from \"@amcharts/amcharts4/charts\";\n```\n\n<br><br>\n\n## run... 그리고 error\n\nimport 후 차트가 보이길 기대하면서 npm run을 했는데... 에러가 떴다\n\n```bash\nerror - ~~/node_modules/@amcharts/amcharts4/core.js:8\nexport { System, system } from \"./.internal/core/System\";\n^^^^^^\n\nSyntaxError: Unexpected token 'export'\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1055:15)\n    at Module._compile (node:internal/modules/cjs/loader:1090:27)\n    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1180:10)\n    at Module.load (node:internal/modules/cjs/loader:1004:32)\n    at Function.Module._load (node:internal/modules/cjs/loader:839:12)\n    at Module.require (node:internal/modules/cjs/loader:1028:19)\n    at require (node:internal/modules/cjs/helpers:102:18)\n    at Object.@amcharts/amcharts4/core (~~~/.next/server/pages/index.js:62:18)\n    at __webpack_require__ (~~~/.next/server/webpack-runtime.js:33:42) {\n  page: '/'\n}\n```\n\namCharts 모듈을 포함해서 transpile 하기 위해 `next-transpile-modules`를 설치해줘야 한다.\n\n```bash\nnpm install next-transpile-modules\n```\n\n설치 후 next.config.js도 수정해야 한다.\n```js\nconst withTM = require(\"next-transpile-modules\")([\"@amcharts/amcharts4\"]);\n\nmodule.exports = withTM({\n// any other general next.js settings\n// EX\n  reactStrictMode: false,\n  webpack: (config, { isServer, node }) => {\n    node = {\n      ...\n    };\n    return config;\n  }\n})\n```\n\n기존에 사용하던 config 내용들은 withTM 안에 작성해주면 된다.\n\n\n## Pie Chart 예제 추가 해보기\n\n```js\n// components/Charts.ts\nimport { useEffect } from \"react\";\nimport * as am4core from \"@amcharts/amcharts4/core\";\nimport * as am4charts from \"@amcharts/amcharts4/charts\";\n\nexport default function PieChart() {\n\tuseEffect(() => {\n\t\tlet chart = am4core.create(\"chartdiv\", am4charts.PieChart);\n\t\t\n\t\t// Add data\n\t\tchart.data = [\n\t\t\t{\n\t\t\t\t\"country\": \"Lithuania\",\n\t\t\t\t\"litres\": 501.9\n\t\t\t}, {\n\t\t\t\t\"country\": \"Czech Republic\",\n\t\t\t\t\"litres\": 301.9\n\t\t\t}, {\n\t\t\t\t\"country\": \"Ireland\",\n\t\t\t\t\"litres\": 201.1\n\t\t\t}, {\n\t\t\t\t\"country\": \"Germany\",\n\t\t\t\t\"litres\": 165.8\n\t\t\t}, {\n\t\t\t\t\"country\": \"Australia\",\n\t\t\t\t\"litres\": 139.9\n\t\t\t}, {\n\t\t\t\t\"country\": \"Austria\",\n\t\t\t\t\"litres\": 128.3\n\t\t\t}, {\n\t\t\t\t\"country\": \"UK\",\n\t\t\t\t\"litres\": 99\n\t\t\t}, {\n\t\t\t\t\"country\": \"Belgium\",\n\t\t\t\t\"litres\": 60\n\t\t\t}, {\n\t\t\t\t\"country\": \"The Netherlands\",\n\t\t\t\t\"litres\": 50\n\t\t\t}\n\t\t];\n\n\t\t// Add and configure Series\n\t\tlet pieSeries = chart.series.push(new am4charts.PieSeries());\n\t\tpieSeries.dataFields.value = \"litres\";\n\t\tpieSeries.dataFields.category = \"country\";\n\t\t/**\n \t    * Destroying map on leave page.\n \t    */\n\t    return () => {\n\t\t\tchart.dispose();\n\t\t};\n\t}, []);\n\n\treturn (\n\t\t<div\n\t\t\tid=\"chartdiv\"\n\t\t\tstyle={{\n\t\t\t\twidth: \"60%\",\n\t\t\t\theight: \"300px\"\n\t\t\t}}\n\t\t/>\n\t);\n}\n```\n\n```js\n// pages/chart.tsx\n\n...\nimport PieChart from \"../components/Charts\";\n\nexport default const Chart = () => {\n\treturn (\n\t\t<>\n\t\t\t<PieChart />\n\t\t</>\n\t)\n}\n```\n\n## Pie Chart 예제 결과\n\n<img src=\"/posts/nextjs-amcharts4/amcharts4-pie-sample.png\" width=\"500px\"/>\n","title":"amCharts4 적용하기 with Next.js","description":"기존에 PHP와 Javascript ES5로 사용하고 있던 amCharts4를 Next.js에서 사용 해보기","date":"2022-09-21"},{"slug":"notice-blog-renewal","content":"\n이번 블로그까지 포함하면 총 3번의 블로그 변경이 있었다.<br>\n첫번째는 [Tistory](http://mitny.tistory.com/),<br>\n두번째는 현재와 같은 Github pages였지만 Jekyll로 만들어진 블로그 중 맘에 드는 테마를 포크해서 써왔다.<br>\n그러다보니 커스텀도 어려웠고.. 최근에 다시 블로그 포스팅을 하고싶어져서 공부중인 Next.js로 새로 만들기로 했다.<br>\n흰 화면에서부터 하나씩 붙여나가니 훨씬 재미도 있고 내 마음대로 구조를 바꿀 수 있어서 좋다.<br>\n\n\n### 예전 블로그 포스팅에 대해서..\n\n블로그 리뉴얼을 하면서 포스팅 성격이 기존과는 조금 달라질 것 같아서 기존 글들은 새 블로그에 남겨두지 않으려고 했었다.<br>\n그러다가 Google Search Console에서 예전 블로그 기록들을 보니<br>\n몇몇 분들께서 참고용으로 예전 포스팅을 링크 해두신게 있어서 그 분들을 위해서도 그렇고<br>\n어떤 경로에서든 예전 포스팅을 찾으시는 분들을 위해서 현재 블로그에서도 접근할 수 있도록 하기로 했다.<br>\n업무나 공부에 어려움이 있어 검색해서 찾은 글을 눌렀더니 404 Not Found가 뜨는 경험은 누구에게도 좋지 않을 것이다...<br>\n부족한 글들이었지만 찾는 분들이 계심에 감사하다. 조금이라도 도움이 되셨다면 다행이고 새로 출발하는 블로그도 잘 봐주셨으면 좋겠다.<br>\n기존에는 보안, 웹 개발 등등 여러 종류의 글을 올렸었는데 새 블로그에서는 프론트엔드 개발 위주로 올려보려고 한다.<br>\n\n- 신규 포스팅 경로: **https://mitny.github.io/post/{title}** EX) http://mitny.github.io/post/notice-blog-renewal\n- 예전 포스팅 경로: **https://mitny.github.io/articles/{yyyy-mm}/{title}** EX) https://mitny.github.io/articles/2016-08/gdb-command\n\n추후에 예전 포스팅들도 메뉴로 빼서 리스팅 할 예정이지만 어떤 글들이 있었는지 궁금하시다면 구글의 site 명령어로도 보실 수 있습니다.<br>\n(일부 포스팅은 복구하지 않았습니다.)<br>\n[site:https://mitny.github.io/](https://www.google.com/search?q=site%3Ahttps%3A%2F%2Fmitny.github.io)\n","title":"블로그 리뉴얼","description":"Jekyll 대신 Next.js로 블로그 만들기"}]},"__N_SSG":true}