{"pageProps":{"post":{"slug":"nextjs-react-i18next","content":"\n처음 Next.js에서 다국어 처리를 해줄 때는 `next-i18next`를 사용했었는데<br>\nSSR로 구현하다보니 __NEXT_DATA__에 리소스가 노출되는 문제가 있어서 클라이언트단에서 번역 처리가 되도록 `react-i18next`를 사용하기로 했다.<br>\nnext-i18next를 CSR에서도 사용할 수 있다거나 리소스를 노출시키지 않고 사용할 수 있는 방법을 찾게 되면 그 때 다시 next-i18next를 사용해보겠다..\n\n\n### 설치\n```bash\nnpm install i18next @types/i18next react-i18next @types/react-i18next\n```\n\n### 리소스 디렉토리 생성\n현재 프로젝트 디렉토리 구조는 이런 식으로 되어있다.<br>\n컴포넌트, 페이지 같은 것들은 src의 하위 디렉토리로 관리하고 있는데<br>\n리소스 디렉토리는 public에 만들지 않고 src/locales로 만들어주겠다.\n\n```bash\n.\n├── next.config.js\n├── next-env.d.ts\n├── next-i18next.config.js\n├── node_modules\n├── package.json\n├── public\n├── src\n│   ├── components\n│   ├── pages\n│   └── styles\n└── tsconfig.json\n```\n\n### src/locales\nsrc/locales에서는 각 언어별로 따로 디렉토리를 만들어주고, i18next 설정 파일인 i18n.ts를 만들어 줄 것이다.<br>\n\n```bash\n.\n├── locales\n│   ├── i18n.ts\n│   ├── en\n│   │   └── common.json\n│   ├── ja\n│   │   └── common.json\n│   └── ko\n│       └── common.json\n```\n\n### i18n.ts\n```js\nimport i18n, { Resource } from \"i18next\";\nimport { initReactI18next } from \"react-i18next\";\n\nimport ko from \"./ko/common.json\";\nimport en from \"./en/common.json\";\nimport ja from \"./ja/common.json\";\n\nconst resources:Resource = {\n  ko: { common: ko },\n  en: { common: en },\n  ja: { common: ja }\n}\n\ni18n.use(initReactI18next).init({\n\tresources, // 리소스\n\tns: \"common\", // namespace 설정\n\tlng: \"ko\", // 초기 설정 언어\n\tfallbackLng: \"ko\",\n\tinterpolation: {\n\t\tescapeValue: false\n\t},\n\treact: {\n\t\tuseSuspense: false\n\t}\n});\n\nexport default i18n;\n```\n\n언어별 리소스 파일을 import 해서 resources 객체에 넣어준 후 i18next를 초기화한다.<br>\n리소스 파일은 아래와 같이 각 메뉴별로 key를 나눠놨는데 비구조화 할당 시 각 key를 namespace로 인식하는 것 같았다.\n\n```json\n// ko/common.json\n{\n\t\"menu\": {\n\t\t\"logout\": \"로그아웃\",\n\t\t...\n\t},\n\t\"config\": {\n\t\t...\n\t}\n\t...\n}\n```\n`t('key1.key2')`가 아닌 `t('key1:key2')`로 접근해야 리소스가 제대로 불러와졌다.<br>\n그래서 resources 객체 생성은 비구조화 할당이 아닌 지금의 코드로 변경하게 되었다.\n\n```js\n// ko에 비구조화 할당했을 때\nconst resources:Resource = {\n  ko: { ...ko },\n  en: { ...en },\n  ja: { ...ja }\n}\n\n// console.log(resources);\n{\n\tko: { menu: { logout: '로그아웃', ... }, ... },\n\ten: ...\n}\n```\n\n```js\n// ko.common에 바로 넣어줬을 때\nconst resources:Resource = {\n  ko: { common: ko },\n  en: { common: en },\n  ja: { common: ja }\n}\n\n// console.log(resources);\n{\n\tko: { common: { menu: [Object] } },\n\ten: ...\n}\n```\n\n\ni18next의 기본 namespace 값은 translation인데 리소스 파일명과 맞추기 위해 `ns: \"common\"` 설정도 해줬다.<br>\nfallbackLng는 만약 en으로 언어 설정을 바꾸려고 했는데 어떤 리소스 키가 en에 없을 경우 대신 값을 가져올 언어를 설정하는 것이다.<br>\n자세한 설정은 [이 곳](https://www.i18next.com/overview/configuration-options)에..\n\n설정이 끝났다면 이제 i18n을 import 해서 사용하면 된다.<br>\n우선 프로젝트 전체에서 사용할 리소스여서 `_app.tsx`에 i18n을 import 해주었다.\n\n```js\nimport \"../locales/i18n\";\n...\n\nfunction App({ ... }) {\n\treturn (\n\t\t...\n\t)\n}\n\nexport default MyApp\n```\n\n이후에는 직접 리소스를 사용할 곳에서 `useTranslation`을 import 하고 사용하면 된다.\n\n```js\n// src/pages/ex.tsx\n\n...\nimport { useTranslation } from \"react-i18next\";\n\nexport default function Example() {\n\tconst { t } = useTranslation();\n\n\treturn (\n\t\t<div>{t('menu.logout')}</div>\n\t)\n}\n\n```\n\n","title":"react-i18next로 다국어 처리하기 with Next.js, TypeScript","description":"react-i18next로 다국어 리소스를 적용해보자","date":"2022-09-23"}},"__N_SSG":true}