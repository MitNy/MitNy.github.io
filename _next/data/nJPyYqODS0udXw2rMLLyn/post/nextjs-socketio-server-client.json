{"pageProps":{"post":{"slug":"nextjs-socketio-server-client","content":"\nSocket.io를 사용하는 예제 중 대표적인게 채팅이지만 client 간 채팅 보다는 좀 더 간단한 목적으로 사용하고자 했고<br>\nclient에서 데이터를 보내면 그 데이터로 server에서 특정 처리 후 성공, 에러 등의 메시지를 다시 client로 보내주는 기능이 필요했다.<br>\n\n\n### 설치\n\n```\nnpm install -D express\nnpm install -D socket.io\nnpm install -D socket.io-client\nnpm install -D @types/express\nnpm install -D @types/socket.io\n```\n\nTypeScript를 사용중이라 타입들도 같이 설치를 해줬다.<br>\n\n### Server\n\n프로젝트 루트에 server.ts를 추가해준다.\n\n```js\nconst express = require('express');\nconst app = express();\nconst http = require('http').createServer(app);\n\nconst io = require('socket.io')(http, {\n    // option (CORS 에러 발생할 경우 추가)\n    cors: {\n        origin: 'client 주소',\n        methods: ['GET', 'POST']\n    }\n})\n\nio.on('connection', (socket) => {\n    // client가 연결되면 연결된 socket id 콘솔에 출력\n    console.log(`User Connected: ${socket.id}`);\n\n    // client로부터 'to server' 이벤트를 받으면 socket id와 함께 client가 보낸 메시지 콘솔에 출력\n    socket.on('to server', (message) => {\n        console.log(`${socket.id}: ${message}`);\n\n        // client에게 통신 성공 메시지를 보내줌\n        socket.emit('to client', 'Communication Success.');\n    });\n});\n\n// 8000번 포트 사용\nhttp.listen(8000);\n```\n\n필수적인 이벤트만 추가해주고 `node server.ts` 로 서버를 실행시켜 준다.\n\n### Client\n\nclient에서 `socket.io-client`를 통해 socket을 사용할 수 있다.\n\n```js\nconst { io } from 'socket.io-client';\nconst { useState, useEffect } from 'react';\n\nconst Page = () => {\n    const [message, setMessage] = useState('');\n\n    // server.ts 설정해준 포트를 사용한다.\n    const socket = io('server:8000');\n\n    useEffect(() => {\n        // server로부터 'to client' 이벤트의 메시지가 전송되면 콘솔에 메시지 출력\n        socket.on('to client', (message: string) => {\n            console.log(message);\n        });\n    }, [message]);\n\n    const handleChange = (e) => {\n        setMessage(e.target.value);\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n\n        // 사용자가 입력한 메시지를 'to server' 이벤트로 server에 전송\n        socket.emit('to server', message);\n    }\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <input type=\"text\" name=\"message\" value={message} onChange={handleChange}/>\n            <button type=\"submit\">Submit</button>\n        </form>\n    )\n}\n\nexport default Page;\n```\n\n<br><br>\n### 결과\n\n<img src=\"/posts/nextjs-socketio-server-client/client.png\" width=\"500px\" />\n\n```bash\nUser Connected: fawYXNTKIyV-72QnAAAX\nfawYXNTKIyV-72QnAAAX: Hello~\n```\n\nclient에서 `Hello~`를 입력 후 Submit 버튼을 누르면<br>\nserver 단 콘솔엔 연결된 socket id와 client가 보낸 'Hello~'가 출력되고,<br>\nserver가 보낸 `Communication Success.` 메시지가 client의 콘솔에 출력된다.","title":"Socket.io로 client와 server 간 데이터 주고 받기 with Next.js, TypeScript","description":"","date":"2023-05-12"}},"__N_SSG":true}