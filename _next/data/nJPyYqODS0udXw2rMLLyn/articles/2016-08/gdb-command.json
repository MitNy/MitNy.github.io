{"pageProps":{"post":{"slug":"2016-08-04-gdb-command","content":"\n### 시작과 종료\n\ngdb [프로그램명] : 시작\n\nq(quit) or ctrl+d  : 종료\n\n\n### 소스보기(list)\n\n### 브레이크 포인트\n\nb func : func 함수의 시작부분에 브레이크 포인트 설정\n\nb 10 : 10행에 브레이크 포인트 설정\n\nb *0x8049000 : 특정 주소에 브레이크 포인트 설정\n\ntb : b와 같으나 1회용 브레이크 포인트. 문법은 b와 동일\n\ninfo b : 현재 브레이크 포인트 보기\n\ncl : 브레이크 포인트 지우기\n\nd : 모든 브레이크 포인트 지우기\n\n### 진행 명령어\n\nr(run) : 프로그램 수행\n\nk(kill) : 프로그램 수행 종료\n\ns(step) : 현재 행 수행 후 정지, 함수 호출시 함수 안으로 들어감\n\ns 5 : s 다섯번 수행\n\nn(next) : 현재 행 수행 후 정지, 함수 호출시 함수 수행 다음 행으로 감\n\nn 5 : n 다섯번 수행\n\n\nc(continue) : 다음 브레이크 포인트까지 진행\n\nu : 현재 루프를 빠져나감\n\nfinish : 현재 함수를 수행하고 빠져 나감\n\nreturn : 현재 함수를 수행하지 않고 빠져 나감\n\nreturn : 위와 같으나 리턴값 지정\n\n\n### 와치 포인트\n\nwatch [변수명] : 특정변수에 와치 포인트를 설정하고, 특정변수가 바뀔 때마다 브레이크가 걸리면서 이전/현재 값을 출력한다.\n\n\n\n### 변수출력 관련\n\ninfo locals : 현재 스택의 로컬변수 모두를 출력\n\ninfo variables : 전역변수 모두 출력 (스압)\n\n\np [변수명] : 해당변수 value 출력\n\n포인터변수 입력시 주소값 출력, *포인터변수명 -> 실제 value 출력\n\np $[레지스터명] : 레지스터값 출력\n\np *[포인터] : struct/class의 배열일 때 배열의 크기를 알림\n\np /[출력형식][변수명] : 출력형식에 맞추어 변수값 출력\n\nt : 2진수\n\no : 8진수\n\nd : 부호없는 10진수\n\nu : 부호없는 10진수\n\nx : 16진수\n\nc : 최초 1바이트 값을 문자형으로 출력\n\nf : 부동소수점\n\na : 가장 가까운 심볼의 오프셋 출력\n\np (캐스팅)[변수명] : 변수를 캐스팅하여 출력 ( p (char*)ptr )\n\np [포인터변수or배열]+[숫자] : 특정 주소 + 숫자 위치 출력 ( p (array[1]+4) )\n\np [변수명] = [value] : 특정 변수의 값을 설정\n\n\ninfo registers : 레지스터 전체 출력\n\n\ndisplay [변수명] : 매번 p 치기 귀찮으니 특정변수 진행 중 계속 출력\n\np와 동일한 방식으로 출력형식 지정가능\n\ndisalbe display [번호] : 일시적으로 디스플레이 중단\n\nenable display [번호] : 중단했던 번호 다시 출력\n\nundisplay [번호] : 출력하던 display 변수 제거\n\n\n\n### 스택 상태 검사\n\ninfo f : 스택 프레임 내용 출력\n\ninfo args : 함수 호출시 인자를 출력\n\ninfo locals : 함수의 지역변수를 출력\n\ninfo catch : 함수의 예외 핸들러를 출력\n\n\nbt : 전체 스택 프레임 출력(콜스택)\n\nframe [스택번호] : 스택번호의 스택 프레임으로 이동\n\nup : 상위 스택 프레임으로 이동\n\nup [숫자] : 숫자만큼 상위 스택프레임으로 이동\n\ndown : 하위 스택 프레임으로 이동\n\ndown [숫자] : 숫자만큼 하위 스택프레임으로 이동\n\n\n### 메모리 상태 검사\n\nx/[범위][출력형식][범위의단위] [메모리주소나 함수명]\n\n범위 : 기본 4바이트 단위\n\n출력 형식\n\nt : 2진수\n\no : 8진수\n\nd : 부호없는 10진수\n\nu : 부호없는 10진수\n\nx : 16진수\n\nc : 최초 1바이트 값을 문자형으로 출력\n\nf : 부동소수점\n\na : 가장 가까운 심볼의 오프셋 출력\n\ns: 문자열로 출력\n\ni : 어셈블리 형식으로 출력\n\n\n\n### 범위의 단위\n\nb : 1 byte \n\nh : 2 byte \n\nw : 4 byte\n\ng : 8 byte\n\n\nex)\nx/10 main : main 함수로부터 40 byte 출력\n\n\n### 기타\n\ndisas [함수명] : 특정함수의 어셈블리 코드 출력\n\ndisas [주소] [주소] : 주소 사이의 어셈블리 코드 출력\n\n\ncall [함수명(인자)] : 특정 함수를 인자값으로 호출\n\njump *[주소] : 주소로 강제적으로 분기\n\njump [행번호] : 특정 행으로 강제 분기\n\njump [함수명] : 특정 함수로 강제 분기\n\n\ninfo signals : signal 종류 출력\n\ninfo tab키 : info로 확인 가능한 명령어 출력\n\nset {타입}[주소] = [값] : 특정 메모리에 값을 지정 ( set {int}0x8048300 = 100 )\n\n\n### 환경 설정\n\ninfo set : 설정 가능한 내용 출력\n\n### 역어셈블 관련\n\n\n1) 역어셈블 표시\n\ngdb$ disas (함수명)    or    gdb$ disas (함수 내의 시작 주소) (함수 내의 종료 주소)\n\n\n- 함수에 포함되지 않는 영역을 역어셈블 하는 경우\n\ngdb$ x/ (명령 수) i (선두 주소)\n\n=> 앞쪽의 주소에서 지정된 명령어만큼 역어셈블\n\n\n### 브레이크 포인트\n\n1) 브레이크 포인트 설정\n\ngdb$ b (함수 이름)    or gdb$ b (주소)\n\n\n2) 브레이크 포인트 상태 표시\n\n-브레이크 포인트가 어디에 설정되어 있는지 등의 상태를 확인\n\ngdb$ i b    (info break)\n\n\n3) 브레이크 포인트 삭제,비활성화,활성화\n\n-브레이크 포인트 삭제 : gdb$ d (브레이크 포인트 번호)\n\n-브레이크 포인트 비활성화 : gdb$ disable (브레이크 포인트 번호)\n\n-브레이크 포인트 활성화 : gdb$ enable (브레이크 포인트 번호)\n\n-일정 횟수만큼 브레이크 포인트를 통과하게끔 비활성화 : gdb$ ignore (브레이크 포인트 번호) ( 비활성화 할 횟수)\n","layout":"post","title":"[GDB] gdb 명령어 모음","categories":["GDB"],"excerpt":" ","comments":true,"share":true,"tags":["gdb","command"]}},"__N_SSG":true}