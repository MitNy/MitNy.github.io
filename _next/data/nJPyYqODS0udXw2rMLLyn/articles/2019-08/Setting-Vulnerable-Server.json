{"pageProps":{"post":{"slug":"2019-08-04-Setting-Vulnerable-Server","content":"\n\n### 세팅 환경\n- docker(Ubuntu 18.04)\n- Apache 2.2.32\n- php 4.4.9\n\n### Docker 이미지 다운로드 및 컨테이너 실행\n\n```bash\ndocker pull ubuntu\ndocker run -it -d -p 3333:80 --name web ubuntu\ndocker exec -it [Container ID] /bin/bash\n```\n\n컨테이너를 종료하지 않고 쉘에서 빠져나오려면 `Ctrl+P`, `Ctrl+Q`를 차례대로 누르면 된다.\n\n### apt 업데이트 및 필수 라이브러리 설치\n\n```bash\napt-get update\napt-get upgrade\napt-get install -y wget\napt-get install -y vim\napt-get install -y build-essential\n```\n\n### zlib 설치\n\n```bash\nwget http://www.zlib.net/zlib-1.2.11.tar.gz\ntar -xvf zlib-1.2.11.tar.gz\ncd zlib-1.2.11\n./configure --prefix=/usr/local\nmake\nmake install\n```\n\n### Apache 구버전 설치\n* 구버전 아카이브: [http://mirror.23media.de/apache/httpd/](http://mirror.23media.de/apache/httpd/)\n\n```bash\napt-get install -y flex\napt-get install -y bison\nwget http://mirror.23media.de/apache/httpd/httpd-2.2.32.tar.gz\ntar -xvf httpd-2.2.32.tar.gz\ncd httpd-2.2.32\n./configure --prefix=/usr/local/apache2 --enable-so\nmake\nmake install\n/usr/local/apache2/bin/apachectl start\n```\n\n### Apache 동작 확인\n![](/assets/posts/web/docker-apache-run.png)\n\n* index.html 위치:/usr/local/apache2/htdocs \n\n\n### PHP 구버전 설치\n\n```bash\napt-get install -y mysql-client\napt-get install -y libicu-dev\napt-get install -y libxml2-dev\nwget http://uk.php.net/distributions/php-4.4.9.tar.gz\ntar xzvf php-4.4.9.tar.gz\ncd php-4.4.9\n./configure --prefix=/usr/local/php4 --with-apxs2=/usr/local/apache2/bin/apxs --with-mysql\nmake\nmake install\n```\n* ./configure 할 때 apache2가 설치된 경로로 설정해야 함\n\n### 설치 확인 및 php.ini 복사\n\napache2 설치 경로의 modules 폴더에 libphp4.so가 있어야한다.\n \n`ls -alstr /usr/local/apache2/modules/`\n![](/assets/posts/web/libphp4-check.png)\n\nphp-4.4.9 폴더 안에 `php.ini-dist`파일과 `php.ini-recommended`파일이 있는데<br>\n이 중 `php.ini-recommended`를 `/usr/local/apache2/conf/php.ini`로 복사해준다.\n\n`cp php.ini-recommended /usr/local/apache2/conf/php.ini`\n\n### Apache /usr/local/apache2/conf/httpd.conf 파일 확인 및 수정\n\n1. ServerName 설정\n`ServerName [localhost or IP or domain]`\n\n2. LoadModule 확인\n`LoadModule php4_module        modules/libphp4.so`\n\n3. DirectoryIndex 수정\n\n```bash\n<IfModule dir_module>\n    DirectoryIndex index.html index.php index.cgi index.htm\n</IfModule>\n```\n\n4. AddType 추가\n\n```bash\nAddType application/x-compress .Z\nAddType application/x-gzip .gz .tgz\nAddType application/x-httpd-php .php .phtml .php3 .php4 .html .htm .inc\nAddType application/x-httpd-source .phps\n```\n\n### PHP 컴파일 확인\n\n![](/assets/posts/web/phpinfo-check.png)\n\n\n이 과정을 Dockerfile로 만들어 한 번에 빌드할 수 있다.\nDockerfile은 Github에 올려두었다.\n[https://github.com/MitNy/Vulnerable-Web-Server](https://github.com/MitNy/Vulnerable-Web-Server)\n\n### Dockerfile 빌드 및 실행\n\n```\ndocker build -t [Image ID] .\ndocker run -it -d -p [port]:[port] --name [container name] [image name]\n# EX) docker run -it -d -p 3333:80 -name web vulnerable-web\ndocker exec -it [Container ID] /bin/bash\n\n```\n","layout":"post","title":"[WEB] APM 취약한 서버 세팅하기","categories":["WEB"],"excerpt":" ","comments":true,"share":true,"tags":["Web-hacking","Apache","PHP","MySQL"]}},"__N_SSG":true}