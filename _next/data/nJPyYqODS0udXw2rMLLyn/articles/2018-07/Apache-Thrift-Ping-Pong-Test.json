{"pageProps":{"post":{"slug":"2018-07-10-Apache-Thrift-Ping-Pong-Test","content":"\n### 환경: Ubuntu 16.04 LTS\n### thrift version : 0.11.0\n\n1.ping_pong thrift 파일을 작성한다.\n\n```\nnamespace py ping_pong\n\nservice ping_pong\n{\n  string ping ()\n}\n```\n\n`thrift --gen py ping_pong.thrift` 를 해주면 gen-py 디렉토리가 생성되고, 그 안에 파일들도 생겨난다.\n\n![](/assets/posts/apache-thrift/ping_genpy.png)\n\n**thrift --gen error 시**\nImportError: No module named Thrift 이런식으로 thrift 관련 모듈이 없다고 뜬다면\nthrift 설치 폴더/thrift-0.11.0/lib/py 에 들어가서\n`sudo python setup.py install` 을 해줍니다.\n![](/assets/posts/apache-thrift/py_setup.png)\n\n설치 완료 후 다시 gen을 했을 때 `No Module named six`이 뜬다면 \n`sudo apt-get install python-six` 또는 `sudo pip install six`를 해주면 된다.\n설치가 완료되었다면 다시 gen.\n\ngen-py 디렉토리 안에 ping과 pong을 보낼client.py와 server.py를 작성한다.\n\n**Client.py**\n```py\nimport time\nfrom thrift.transport import TSocket\nfrom thrift.transport import TTransport\nfrom thrift.protocol import TBinaryProtocol\nfrom thrift.server import TServer\nfrom thrift.Thrift import TException\n\nimport ping_pong.ping_pong\n\nsocket = TSocket.TSocket('192.168.0.53', 9090)\ntransport = TTransport.TBufferedTransport(socket)\nprotocol = TBinaryProtocol.TBinaryProtocol(transport)\nclient = ping_pong.ping_pong.Client(protocol)\n\nwhile(1):\n    try:\n        transport.open()\n        print \">> ping to server\"\n        print client.ping()\n        transport.close()\n        time.sleep(1)\n    except TException, tx:\n        print \"%s\" % (tx.message)\n```\n\n**Server.py**\n```py\nimport sys\n# thrift 0.11.0\nfrom thrift.transport import TSocket\nfrom thrift.transport import TTransport\nfrom thrift.protocol import TBinaryProtocol\nfrom thrift.server import TServer\nfrom thrift.Thrift import TException\n\nimport ping_pong.ping_pong\n\n\n\nclass ping_pong_server(ping_pong.ping_pong.Processor):\n    def __init__(self, my_address, my_port):\n        self.my_address = my_address\n        self.my_port = my_port\n\n    def startServer(self):\n        processor = ping_pong.ping_pong.Processor(self)\n        transport = TSocket.TServerSocket(host=self.my_address, port=self.my_port)\n        tfactory = TTransport.TBufferedTransportFactory()\n        pfactory = TBinaryProtocol.TBinaryProtocolFactory()\n\n        server = TServer.TThreadedServer(processor, transport, tfactory, pfactory)\n\n        print 'Starting the server...'\n        server.serve()\n        print 'done.'\n\n\n    def ping(self):\n        print \"<< ping from client\"\n\tprint \">> pong to client\"\n        return \"<< pong from server\"\n\nping_pong_server('192.168.0.53', 9090).startServer();\n```\n\nlocalhost로 하려고 했으나 VM 두개를 돌려 아예 client와 server를 분리시켰다.\n\nserver측 VM의inet addr로 소켓 통신을 할 것이다.\nserver측에서 9090포트를 열고, client는192.168.0.53:9090에 접근 요청을 한다.\nclient측에서는 ping을 보내고 server에서 받은 값을 출력한다.\nserver측엥서는 client에서 보낸 ping을 받고 pong을 return 해준다.\n\n출력은 다음과 같다.\n![](/assets/posts/apache-thrift/ping_client.png)\n![](/assets/posts/apache-thrift/ping_server.png)\n\n","layout":"post","title":"[Apache Thrift] Ping Pong Test","categories":["Apache Thrift"],"excerpt":" ","comments":true,"share":true,"tags":["Apache Thrift","Ubuntu","ping pong"]}},"__N_SSG":true}