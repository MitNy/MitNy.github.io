{"pageProps":{"post":{"slug":"2019-07-12-Tensorflow-array-functions","content":"\n### 상수 및 세션 생성\n```py\nimport tensorflow as tf\n\nc1 = tf.constant([1, 2, 3, 4, 5, 0, 9, 8 ,7 ,6])\nc2 = tf.constant([1, 2, 3])\nc3 = tf.constant([1, 3, 5])\nc4 = tf.constant([[1, 3, 5], [5, 7, 9]])\nv1 = tf.constant([[6, 5, 4, 3, 2, 1],[0, 1, 2, 9, 8, 7]])\nv2 = tf.constant([[6, 5, 4], [0, 1, 2]])\nv3 = tf.constant([2, 4, 6])\nv4 = tf.constant([[2, 4, 6], [6, 8, 0]])\n\nsession = tf.Session()\nsession.run(tf.global_variables_initializer())\n```\n\n### Slicing \n```py\nprint(\"====== Slicing ======\")\nprint(session.run(tf.slice(c1,[2],[3]))) # [3 4 5]\nprint(session.run(tf.slice(v1, [0, 2], [2, 2]))) # [[4 3] [2 9]]\nprint(session.run(tf.slice(v1, [0, 2], [2, -1]))) # [[4 3 2 1] [2 9 8 7]]\n```\n\n### Tile\n```py\nprint(\"\\n====== Tile ======\") # 한 텐서를 여러번 반복해 새로운 텐서를 만듦\nprint(session.run(tf.tile(c2, [3]))) # [1 2 3 1 2 3 1 2 3]\nprint(session.run(tf.tile(v2, [2,2])))\n# [[6 5 4 6 5 4] [0 1 2 0 1 2] [6 5 4 6 5 4] [0 1 2 0 1 2]]\n```\n\n### Pad\n```py\nprint(\"\\n====== Pad ======\") # 2차원 배열에서만 동작\nprint(session.run(tf.pad(v2, [[1,1], [2,2]], \"CONSTANT\")))\n# [[0 0 0 0 0 0 0] [0 0 6 5 4 0 0] [0 0 0 1 2 0 0] [0 0 0 0 0 0 0]]\nprint(session.run(tf.pad(v2, [[1,1], [2,2]], \"REFLECT\"))) # 반복\n# [[2 1 0 1 2 1 0] [4 5 6 5 4 5 6] [2 1 0 1 2 1 0] [4 5 6 5 4 5 6]]\nprint(session.run(tf.pad(v2, [[1,1], [2,2]], \"SYMMETRIC\"))) # 가운데 대칭\n# [[5 6 6 5 4 4 5] [5 6 6 5 4 4 5] [1 0 0 1 2 2 1] [1 0 0 1 2 2 1]]\n```\n\n### Stack & Unstack\n```py\nprint(\"\\n====== Stack ======\") # pack -> stack 차원 증가\nprint(session.run(tf.stack([c3, v3]))) # [[1 3 5] [2 4 6]]\nprint(session.run(tf.stack([c4, v4]))) # [[[1 3 5] [5 7 9]]  [[2 4 6] [6 8 0]]]\n\nprint(\"\\n====== Unstack ======\") # unpack -> unstack 차원 감소\ns1 = tf.stack([c3,v3]) # [[1, 3, 5] [2 4 6]]\ns2 = tf.stack([c4,v4]) # [[[1 3 5] [5 7 9]] [[2 4 6] [6 8 0]]\nprint(session.run(tf.unstack(s1))) # [[1, 3, 5] [2, 4 ,6]]\nprint(session.run(tf.unstack(s2))) # [[[1, 3, 5], [5, 7, 9]], [[2, 4, 6], [6, 8, 0]]]\n```\n\n### Reverse\n```py\nprint(\"\\n====== Reverse ======\")\nprint(session.run(tf.reverse(v1, [True, False]))) # [[7 8 9 2 1 0] [1 2 3 4 5 6]]\n```\n\n### Transpose\n전치행렬 리턴\n\n```py\nprint(\"\\n====== Transpose ======\")\nprint(session.run(tf.transpose(c3))) # [1 3 5]\nprint(session.run(tf.transpose(c4, perm=[0,1]))) # [[1 3 5] [5 7 9]]\n```\n\n### Gather\n```py\nprint(\"\\n====== Gather ======\")\nprint(session.run(tf.gather(c1, [2, 5, 2, 5]))) # [3 0 3 0]\nprint(session.run(tf.gather(v1, [[0,0], [1,1]])))\n# [[[6 5 4 3 2 1] [6 5 4 3 2 1]] [[0 1 2 9 8 7] [0 1 2 9 8 7]]]\n```\n\n### one_hot\n```py\nprint(\"\\n====== one_hot ======\")\nprint(session.run(tf.one_hot([1,2,3,4],2)))\n# [[0. 1.] [0. 0.] [0. 0.] [0. 0.]]\nprint(session.run(tf.one_hot([2,-1,1],3)))\n# [[0. 0. 1.] [0. 0. 0.] [0. 1. 0.]]\n```\n\n","layout":"post","title":"[TensorFlow] TensorFlow 배열 다루기","categories":["TensorFlow"],"excerpt":" ","comments":true,"share":true,"tags":["TensorFlow","array"]}},"__N_SSG":true}